generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String?       @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  transactions  Transaction[]
  bankInfos     BankInfo[]
  cards         Card[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Transaction {
  id                    String   @id @default(cuid())
  type                  String
  amount                Float
  status                String
  description           String
  date                  DateTime @default(now())
  destinationBankInfoId String?
  isFixed               Boolean  @default(false)
  isInstallment         Boolean  @default(false)
  repeat                Boolean  @default(false)
  installmentCount      Int?
  categoryId            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  BankInfo   BankInfo? @relation(fields: [bankInfoId], references: [id], onDelete: Cascade)
  bankInfoId String?

  Card   Card?   @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId String?

  Bill   Bill?   @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId String?
}

model BankInfo {
  id              String        @id @default(cuid())
  currentBalance  Float
  bankInstitution String
  accountType     String
  initialBalance  Float
  transactions    Transaction[]
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  cards           Card[]
}

model Card {
  id          String   @id @default(cuid())
  description String
  limit       Float
  flag        String
  closingDate Int
  dueDate     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bankInfo    BankInfo      @relation(fields: [bankInfoId], references: [id], onDelete: Cascade)
  bankInfoId  String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  bills       Bill[]
  transactions Transaction[]
}

model Bill {
  id          String   @id @default(cuid())
  description String
  amount      Float
  dueDate     DateTime
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  card        Card          @relation(fields: [cardId], references: [id], onDelete: Cascade)
  cardId      String
  transactions Transaction[]
}

model Category {
  id           String   @id @default(cuid())
  name         String
  value        String
  categoryType String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
